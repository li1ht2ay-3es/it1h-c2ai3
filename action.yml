description: Build program


inputs:
  token:
    description: Personal Access Token
    required: false
    default: ''

  branch:
    description: platform
    required: false
    default: ''

  arch:
    description: platform
    required: false
    default: 'x64'

  name:
    description: account
    required: false
    default: ''

  password:
    description: account
    required: false
    default: ''

  totp:
    description: account
    required: false
    default: ''


runs:
  using: composite

  steps:

  - uses: li1ht2ay-3es/gi1-ac2io3s@checkout-branch
    with:
      branch: ${{ inputs.branch }}

      token: ${{ inputs.token }}
      auto: true



  - if: inputs.arch == 'so64'
    working-directory: ${{ github.workspace }}
    shell: bash
    run: |
      curl -L -o commit.zip https://github.com/li1ht2ay-3es/it1h-c2ai3/archive/${{github.sha}}.zip
      unzip -o commit.zip
      cp -r -f ./it1h-c2ai3-${{github.sha}}/* .



  - uses: actions/setup-python@main


  - shell: bash
    run: |
      python -m pip install --upgrade pip
      pip install build twine


  - if: inputs.arch == 'x86' || inputs.arch == 'x64'
    uses: li1ht2ay-3es/gi1-ac2io3s@mingw-install
    with:
      arch: ${{ inputs.arch }}


#  - uses: li1ht2ay-3es/cc1ch2-ac3io4@custom
#    with:
#      key: ${{ inputs.arch }}


  - shell: bash
    run: |
      merge () {
        echo "<<< ===  merging  $1  === >>>";
        if [[ -z "$2" ]]; then
          git merge origin/$1 || { git diff --diff-filter=U; exit 1; }
        else
          git merge origin/$1 || { git diff --diff-filter=U; git merge --abort; git merge -X $2 origin/$1; }
        fi
        echo "";
      }


  - if: inputs.arch == 'x86' || inputs.arch == 'x64'
    working-directory: ${{ github.workspace }}
    env:
      CC: ccache ${{ env.MINGW_CC }}
      CXX: ccache ${{ env.MINGW_CXX }}
    shell: bash
    run: |
      make platform="win"



  - if: inputs.arch == 'so64'
    working-directory: ${{ github.workspace }}
    shell: bash
    run: |
      python -m build
      ls -R
      pip install ./dist/*.gz



  - if: inputs.arch == 'so64'
    working-directory: ${{ github.workspace }}
    shell: bash
    run: |
      scrape=$(<scrape.txt)

      curl -L -o limit.txt https://itchclaim.tmbpeter.com/data/resume_index.txt
      scrape_limit=$(<limit.txt)

      echo "scrape sales = $scrape $scrape_limit 5000"
      itchclaim --login ${{ inputs.name }} --password ${{ inputs.password }} --totp ${{ inputs.totp }} scrape_sales $scrape $scrape_limit 5000



  - if: inputs.arch == 'so64'
    working-directory: ${{ github.workspace }}
    shell: bash
    run: |
      scrape=$(<scrape.txt)


      git checkout --orphan cache-temp-report
      git reset --hard


      flag=0

      if test -f "itch-future.txt"; then
        git add itch-future.txt
        flag=1
      fi

      if test -f "itch-sales.txt"; then
        git add itch-sales.txt
        flag=1
      fi

      if test -f "itch-miss.txt"; then
        git add itch-miss.txt
        flag=1
      fi

      if test -f "sales-url.txt"; then
        git add sales-url.txt
        flag=1
      fi


      if (( $flag == 1 )); then
        git commit -m "[cache] sales"
        git push -f --set-upstream origin HEAD:zz-sales-$scrape

      elif [[ -n $(git ls-remote --heads origin zz-sales-$scrape) ]]; then
        git push --set-upstream origin --delete zz-sales-$scrape
      fi



  - uses: actions/upload-artifact@main
    with:
      name: itch-sales
      path: |
        ${{ github.workspace }}/itch-future.txt
        ${{ github.workspace }}/itch-sales.txt
        ${{ github.workspace }}/itch-miss.txt
